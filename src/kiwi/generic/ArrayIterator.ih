/**
 * @file ArrayIterator.ih
 * @brief Implementation file for ArrayContainer's iterator.
 * @author Nicolas Silva (email: nical.silva@gmail.com  twitter: @nicalsilva)
 * @version 0.1
 */

namespace kiwi
{
namespace generic
{


// ---------------------------------------------------------------------
// --------------------------- Iterator --------------------------------
// ---------------------------------------------------------------------


template<typename T>
ArrayIterator<T>::ArrayIterator(T* dataPtr, T* endPtr, unsigned int increment) 
: _increment(increment), _end(endPtr)
{
	assert( dataPtr <= _end );
	Parent::_ptr = dataPtr;
	//Debug::print() << "ArrayIterator::increment = " << _increment <<endl();
}

template<typename T>
ArrayIterator<T> ArrayIterator<T>::operator ++ () 
{
	assert(Parent::_ptr <= _end);
	ArrayIterator<T> temp = *this;
	Parent::_ptr+=_increment;
	return temp;
}
template<typename T>
ArrayIterator<T>& ArrayIterator<T>::operator ++ (int) 
{
	assert(Parent::_ptr <= _end);
	Parent::_ptr+=_increment;
	return *this;
}

template<typename T>
ArrayIterator<T> ArrayIterator<T>::operator -- () 
{
	assert( Parent::_ptr <= _end);
	ArrayIterator<T> temp = *this;
	Parent::_ptr-=_increment;
	return temp;
}
template<typename T>
ArrayIterator<T>& ArrayIterator<T>::operator -- (int) 
{
	assert( Parent::_ptr <= _end);
	Parent::_ptr-=_increment;
	return *this;
}


template<typename T>
bool ArrayIterator<T>::isDone()
{
	return ( Parent::_ptr > _end );
}

template<typename T>
bool ArrayIterator<T>::onIteration()
{
	//assert( Parent::_ptr <= _end);
	if( Parent::_ptr < _end )
	{
		++(*this);
		return true;
	}
	return false;
}



// ---------------------------------------------------------------------
// --------------------- Const Iterator --------------------------------
// ---------------------------------------------------------------------



template<typename T>
ArrayConstIterator<T>::ArrayConstIterator(T* dataPtr, T* endPtr, unsigned int increment) 
: _increment(increment), _end(endPtr)
{
	assert( dataPtr <= endPtr );
	Parent::_ptr = dataPtr;
	//Debug::print() << "ArrayConstIterator::increment = " << _increment << endl();
}

template<typename T>
ArrayConstIterator<T> ArrayConstIterator<T>::operator ++ () 
{
	assert( Parent::_ptr <= _end );
	ArrayConstIterator<T> temp = *this;
	Parent::_ptr+=_increment;
	return temp;
} 
template<typename T>
ArrayConstIterator<T>& ArrayConstIterator<T>::operator ++ (int) 
{
	assert( Parent::_ptr <= _end );
	ArrayConstIterator<T> temp = *this;
	Parent::_ptr+=_increment;
	return *this;
} 

template<typename T>
ArrayConstIterator<T> ArrayConstIterator<T>::operator -- () 
{
	assert( Parent::_ptr <= _end );
	ArrayConstIterator<T> temp = *this;
	Parent::_ptr-=_increment;
	return temp;
}
template<typename T>
ArrayConstIterator<T>& ArrayConstIterator<T>::operator -- (int) 
{
	assert( Parent::_ptr <= _end );
	Parent::_ptr-=_increment;
	return *this;
}


template<typename T>
bool ArrayConstIterator<T>::isDone()
{
	return ( Parent::_ptr > _end );
}

template<typename T>
bool ArrayConstIterator<T>::onIteration()
{
	//assert( Parent::_ptr <= _end);
	if( Parent::_ptr < _end )
	{
		++(*this);
		return true;
	}
	return false;
}



}// namespace
}// namespace


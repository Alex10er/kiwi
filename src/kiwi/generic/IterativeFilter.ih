// Copyright (c) 2010 Nicolas Silva
// All rights reserved.
//      Redistribution and use in source and binary forms, with or without
//      modification, are permitted provided that the following conditions are
//      met:
//      
//      * Redistributions of source code must retain the above copyright
//        notice, this list of conditions and the following disclaimer.
//      * Redistributions in binary form must reproduce the above
//        copyright notice, this list of conditions and the following disclaimer
//        in the documentation and/or other materials provided with the
//        distribution.
//      * Neither the name of the  nor the names of its
//        contributors may be used to endorse or promote products derived from
//        this software without specific prior written permission.
//      
//      THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
//      "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
//      LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
//      A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
//      OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
//      SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
//      LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
//      DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
//      THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//      (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
//      OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.



namespace kiwi
{
namespace generic
{



template <typename InputType>
IterativeFilter<InputType>::IterativeFilter(uint32_t nbWriters)
: Parent(nbWriters)
{
	for(unsigned i = 0; i < nbWriters; ++i)
		addReaderInputPort();
}



template <typename InputType>
void IterativeFilter<InputType>::process()
{
ScopedBlockMacro(__scop, "IterativeFilter::process()")

	

	uint32_t nbWriters = nbWriterInputs();
	
	InputIteratorType in[nbWriters];
	OutputIteratorType out[nbWriters];
	
	
	uint32_t size = 0;
	for(unsigned i = 0; i < nbWriters; ++i)	
	{
		typename InputType::ReaderType reader( readerInputPort(i) );
		typename InputType::WriterType writer( writerInputPort(i) );
		uint32_t insize = reader.nbScalarElements();
		uint32_t outsize = writer.nbScalarElements();
		if( size == 0 ) size = insize;
		if( (size != insize) || (size != outsize) )
		{
			Debug::error() << "IterativeFilter::process error. size doesn't match." << endl();
			assert(false);
			return;
		}
		
		in[i] = reader.getIterator();
		out[i] = writer.getIterator();
	}
	
	preProcess();
	
	do{
		processFragment(in,out);
		for(uint32_t i = 0; i < nbWriters; ++i)
		{
			++(out[i]);
			++(in[i]);
		}
	}while( !out[0].isDone() );
}
	

	
	
	
}// namsespace
}// namsespace

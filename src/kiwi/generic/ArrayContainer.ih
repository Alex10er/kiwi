// Copyright (c) 2010 Nicolas Silva
// All rights reserved.
//      Redistribution and use in source and binary forms, with or without
//      modification, are permitted provided that the following conditions are
//      met:
//      
//      * Redistributions of source code must retain the above copyright
//        notice, this list of conditions and the following disclaimer.
//      * Redistributions in binary form must reproduce the above
//        copyright notice, this list of conditions and the following disclaimer
//        in the documentation and/or other materials provided with the
//        distribution.
//      * Neither the name of the  nor the names of its
//        contributors may be used to endorse or promote products derived from
//        this software without specific prior written permission.
//      
//      THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
//      "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
//      LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
//      A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
//      OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
//      SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
//      LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
//      DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
//      THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//      (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
//      OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

namespace kiwi{
namespace generic{


template<typename T, unsigned int D>
ArrayContainer<T,D>::ArrayContainer()
{
	_data = 0;
	_deleteDataDestructor = false;
	_totalSize = 0;
}

template<typename T, unsigned int D>
ArrayContainer<T,D>::ArrayContainer( const CoordinateVector& size ) 
{
	_deleteDataDestructor = true;
	_spanSize = size;
	// compute the total size
	_totalSize = 1;
	for(unsigned i = 0; i < D; ++i)	_totalSize*= size(i);
	
	DEBUG_ONLY(	Debug::print() << "allocate " << _totalSize << endl(); )
	
	// allocate the data
	_data = new T[_totalSize];
	

	_stride(0) = 1;
	unsigned temp = 1;
	for(unsigned i = 1; i < D; ++i)
	{
		temp *= _spanSize(i);
		_stride(i) = temp;
	}
	
}

template<typename T, unsigned int D>
ArrayContainer<T,D>::ArrayContainer(ValueType* dataPtr
	, const CoordinateVector& size
	, const StrideVector& stride )
:_stride(stride)
{
	ScopedBlockMacro(scop,"ArrayContainer::constructor")
	_deleteDataDestructor = false;
	_spanSize = size;
	_stride = stride;
	// compute the total size
	_totalSize =  1;
	for(unsigned i = 0; i < D; ++i)	_totalSize*= size[i];

	_data = dataPtr;

	Debug::print() << "stride: " << _stride.toStr() << endl(); 
}



template<typename T, unsigned int D>
ArrayContainer<T,D>::~ArrayContainer()
{
	if(_deleteDataDestructor) delete[] _data;
}



template<typename T, unsigned int D>
Point<kiwi::uint32_t, D> ArrayContainer<T,D>::stride() const
{
	return _stride;
}

template<typename T, unsigned int D>
kiwi::uint32_t ArrayContainer<T,D>::stride(kiwi::uint32_t dimension) const
{
	return _stride(dimension);
}

template<typename T, unsigned int D>
ArrayIterator<T> ArrayContainer<T,D>::getBasicIterator() const
{ 
	return ArrayIterator<ValueType>( _data, _data + _totalSize-1, 1 ); 
}
	


template<typename T, unsigned int D>
void ArrayContainer<T,D>::printState()
{
ScopedBlockMacro(__scop, kiwi::string("ArrayContainer<")
	+  types::str<T>() 
	+ "," + boost::lexical_cast<string>( D )
	+ ">::printState" )
	
	ArrayIterator<ValueType> it = getBasicIterator();
	
	do{		
		Debug::print() << *it;
	}while ( it.onIteration() );

	Debug::endl();
	Debug::print() << _totalSize << " elements" << endl(); 
}


template<typename T, unsigned int D>
void ArrayContainer<T,D>::registerToFactory(kiwi::utils::NodeFactory& factory, const kiwi::string& filterId)
{
	kiwi::string tags("#Container#array");
	kiwi::string name("ArrayContainer<");
	
	tags += boost::lexical_cast<kiwi::string>(D) + types::str<ValueType>();
	
	name += boost::lexical_cast<kiwi::string>(D) + "," + types::str<ValueType>() + ">";
	
	factory.registerClass( filterId
		, kiwi::utils::FactoryDescriptor<kiwi::core::Node>(newArrayContainer, tags )
	);
}


template<typename T, unsigned int D>
bool
ArrayContainer<T,D>::resize(const CoordinateVector& newSize, bool keepData)
{
	ScopedBlockMacro(__scop, "ArrayContainer::resize")
	kiwi::uint32_t nTotalSize = 1;
	assert( "resize" == "not supported yet"); 
	for(unsigned i = 0; i < D; ++i)	nTotalSize*= newSize(i);
	
	DEBUG_ONLY(	Debug::print() << "allocate " << nTotalSize << endl(); )
	
	// allocate the data
	T* tempData = new T[nTotalSize];
	if(keepData){
		for(int d = 0; d < D; ++d){
		// TODO
		}
	}
}


} // namespace
} // namespace

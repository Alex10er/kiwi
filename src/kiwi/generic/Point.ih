// Copyright (c) 2010 Nicolas Silva
// All rights reserved.
//      Redistribution and use in source and binary forms, with or without
//      modification, are permitted provided that the following conditions are
//      met:
//      
//      * Redistributions of source code must retain the above copyright
//        notice, this list of conditions and the following disclaimer.
//      * Redistributions in binary form must reproduce the above
//        copyright notice, this list of conditions and the following disclaimer
//        in the documentation and/or other materials provided with the
//        distribution.
//      * Neither the name of the  nor the names of its
//        contributors may be used to endorse or promote products derived from
//        this software without specific prior written permission.
//      
//      THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
//      "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
//      LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
//      A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
//      OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
//      SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
//      LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
//      DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
//      THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//      (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
//      OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


namespace kiwi
{
namespace generic
{

template <typename T, unsigned int D>
Point<T,D>::Point(CoordType* data)
{
	for(unsigned i = 0; i < D; ++i) _coordinates[i] = data[i];
}
template <typename T, unsigned int D>
Point<T,D>::Point()
{
	assert(D>0);
	// No initialization for performances
}
template <typename T, unsigned int D>
Point<T,D>::Point(CoordType x)
{
	assert(D>0);
	_coordinates[0] = x;
	for(unsigned i = 1; i < D; ++i) _coordinates[i] = 0;
}
template <typename T, unsigned int D>
Point<T,D>::Point(CoordType x, CoordType y)
{
	assert(D>=2);
	_coordinates[0] = x;
	_coordinates[1] = y;
	for(unsigned i = 2; i < D; ++i) _coordinates[i] = 0;
}
template <typename T, unsigned int D>
Point<T,D>::Point(CoordType x, CoordType y, CoordType z)
{
	assert(D>=3);
	_coordinates[0] = x;
	_coordinates[1] = y;
	_coordinates[2] = z;
	for(unsigned i = 3; i < D; ++i) _coordinates[i] = 0;
}
template <typename T, unsigned int D>
Point<T,D>::Point(CoordType x, CoordType y, CoordType z, CoordType w)
{
	assert(D>=4);
	_coordinates[0] = x;
	_coordinates[1] = y;
	_coordinates[2] = z;
	_coordinates[3] = w;
	for(unsigned i = 4; i < D; ++i) _coordinates[i] = 0;
}

template <typename T, unsigned int D>
Point<T,D>::Point(const Point<CoordType,Dimension>& point)
{
	assert(D>0);
	for(unsigned i = 0; i < D; ++i) _coordinates[i] = point._coordinates[i];
}

template <typename T, unsigned int D>
Point<T,D> Point<T,D>::operator + (const Point<T,D>& point)
{
ScopedBlockMacro(__scop, kiwi::string("Point<")
		+types::str<T>()+","
		+boost::lexical_cast<kiwi::string>(D)
		+">::operator + (Point)")
	Point<T,D> res;
	for(unsigned int i = 0; i < D; ++i)
	{
		res[i] = _coordinates[i] + point._coordinates[i];
		DEBUG_ONLY(		
			Debug::print() << "> " <<  static_cast<float>(_coordinates[i]) <<" + "
					<< static_cast<float>(point._coordinates[i])
					<< " = " << static_cast<float>( res[i] ) << endl();
		)//DEBUG_ONLY
	}
	return res;
}

template <typename T, unsigned int D>
Point<T,D> Point<T,D>::operator - (const Point<T,D>& point)
{
	Point<T,D> res;
	for(unsigned int i = 0; i < D; ++ i)
		res[i] = _coordinates[i] - point._coordinates[i];
	return res;
}

template <typename T, unsigned int D>
void Point<T,D>::operator += (const Point<T,D>& point)
{
	for(unsigned int i = 0; i < D; ++ i)
		_coordinates[i] += point._coordinates[i];
}

template <typename T, unsigned int D>
void Point<T,D>::operator -= (const Point<T,D>& point)
{
	for(unsigned int i = 0; i < D; ++ i)
		_coordinates[i] -= point._coordinates[i];
}

template <typename T, unsigned int D>
bool Point<T,D>::operator == (const Point<T,D>& point)
{

ScopedBlockMacro(__scop, kiwi::string("Point<")
		+types::str<T>()+","
		+boost::lexical_cast<kiwi::string>(D)
		+">::operator == (Point)")
	for(unsigned int i = 0; i < D; ++ i)
	{
		DEBUG_ONLY(
		Debug::print() << "> " << static_cast<double>(_coordinates[i]) << " " 
				<< static_cast<double>(point._coordinates[i]) << endl();
		)//DEBUG_ONLY
		if(_coordinates[i] != point._coordinates[i]) return false;
	}
	return true;
}

template <typename T, unsigned int D>
bool Point<T,D>::operator != (const Point<T,D>& point)
{
	for(unsigned int i = 0; i < D; ++ i)
		if(_coordinates[i] != point._coordinates[i]) return true;

	return false;
}

/*
template <typename T1, unsigned int D>
template <typename T2 >
Point<T1,D>& Point<T1,D>::operator = (const Point<T2, D>& p)
{
	if(reinterpret_cast<const Point<T1,D>* >(&p) != this)
		for(unsigned i = 0; i < D; ++i)
			_coordinates[i] 
				= static_cast<T1>(p(i));
	
	return *this;
}
*/
template <typename T, unsigned int D>
Point<T,D>& Point<T,D>::operator = (const Point<T, D>& p)
{
	if(&p != this)
		for(unsigned i = 0; i < D; ++i)
			this->_coordinates[i] = p._coordinates[i];
	
	return *this;
}


}//namespace image
}//namespace kiwi

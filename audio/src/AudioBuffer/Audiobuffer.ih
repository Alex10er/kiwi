//      Redistribution and use in source and binary forms, with or without
//      modification, are permitted provided that the following conditions are
//      met:
//      
//      * Redistributions of source code must retain the above copyright
//        notice, this list of conditions and the following disclaimer.
//      * Redistributions in binary form must reproduce the above
//        copyright notice, this list of conditions and the following disclaimer
//        in the documentation and/or other materials provided with the
//        distribution.
//      * Neither the name of the  nor the names of its
//        contributors may be used to endorse or promote products derived from
//        this software without specific prior written permission.
//      
//      THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
//      "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
//      LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
//      A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
//      OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
//      SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
//      LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
//      DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
//      THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//      (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
//      OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

#include "generic/Point.hpp"

namespace kiwi
{
namespace audio
{
	
template<typename T>
AudioBuffer<T>::AudioBuffer( unsigned size, portIndex_t nbBuffer ) 
: generic::ArrayContainer<T,1>(generic::Point<unsigned int,1>(size*nbBuffer)
	, nbBuffer				
	, false			// arrays are not interleaved
	, generic::ArrayContainer<T,1>::MONO )
{
	
}

template<typename T>	
AudioBuffer<T>::AudioBuffer(ValueType* dataPtr
	, unsigned size
	, portIndex_t nbBuffer )
: generic::ArrayContainer<T,1>(dataPtr
	, generic::Point<unsigned int,1>(size*nbBuffer)
	, nbBuffer
	, false
	, generic::ArrayContainer<T,1>::MONO )
{
	
}

template<typename T>
AudioBuffer<T>::~AudioBuffer()
{
	
}
	
	
} //namespace
} //namespace
